(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{403:function(t,e,a){"use strict";a.r(e);var v=a(42),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),a("h2",{attrs:{id:"一、介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、介绍"}},[t._v("#")]),t._v(" 一、介绍")]),t._v(" "),a("h3",{attrs:{id:"代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理")]),t._v(" "),a("ol",[a("li",[t._v("场景: 当一个类的某些功能需要由别的类来实现，但是又不确定具体会是哪个类实现。")]),t._v(" "),a("li",[t._v("优势: 解耦合")]),t._v(" "),a("li",[t._v("敏捷原则: 开放-封闭原则")])]),t._v(" "),a("h3",{attrs:{id:"观察者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者"}},[t._v("#")]),t._v(" 观察者")]),t._v(" "),a("ol",[a("li",[t._v("场景: 一般为model层对，controller和view进行的通知方式，不关心谁去接收，只负责发布信息。")]),t._v(" "),a("li",[t._v("优势: 解耦合")]),t._v(" "),a("li",[t._v("敏捷原则: 接口隔离原则，开放-封闭原则")])]),t._v(" "),a("h3",{attrs:{id:"mvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[t._v("#")]),t._v(" MVC")]),t._v(" "),a("ol",[a("li",[t._v("场景: 是一中非常古老的设计模式，通过数据模型，控制器逻辑，视图展示将应用程序进行逻辑划分。")]),t._v(" "),a("li",[t._v("优势: 使系统，层次清晰，职责分明，易于维护")]),t._v(" "),a("li",[t._v("敏捷原则: 对扩展开放-对修改封闭")])]),t._v(" "),a("h3",{attrs:{id:"单例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例"}},[t._v("#")]),t._v(" 单例")]),t._v(" "),a("ol",[a("li",[t._v("场景: 确保程序运行期某个类，只有一份实例，用于进行资源共享控制。")]),t._v(" "),a("li",[t._v("优势: 使用简单，延时求值，易于跨模块")]),t._v(" "),a("li",[t._v("敏捷原则: 单一职责原则")])]),t._v(" "),a("h3",{attrs:{id:"策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#策略"}},[t._v("#")]),t._v(" 策略")]),t._v(" "),a("ol",[a("li",[t._v("场景: 定义算法族，封装起来，使他们之间可以相互替换。")]),t._v(" "),a("li",[t._v("优势: 使算法的变化独立于使用算法的用户")]),t._v(" "),a("li",[t._v("敏捷原则: 接口隔离原则；多用组合，少用继承；针对接口编程，而非实现。")])]),t._v(" "),a("h3",{attrs:{id:"工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂"}},[t._v("#")]),t._v(" 工厂")]),t._v(" "),a("ol",[a("li",[t._v("场景: 工厂方式创建类的实例，多与proxy模式配合，创建可替换代理类。")]),t._v(" "),a("li",[t._v("优势: 易于替换，面向抽象编程，application只与抽象工厂和易变类的共性抽象类发生调用关系。")]),t._v(" "),a("li",[t._v("缺点: 是工厂类几种了所有产品的创建逻辑，一旦不能正常工作，整个系统都会受到影响，而且当产品类多结构复杂的时候，把所有创建工作放进一个工厂中来，回事后期程序的扩展较为困难。")]),t._v(" "),a("li",[t._v("敏捷原则: DIP依赖倒置原则")])]),t._v(" "),a("h2",{attrs:{id:"二、使用过哪类设计模式-常用的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、使用过哪类设计模式-常用的"}},[t._v("#")]),t._v(" 二、使用过哪类设计模式 - 常用的")]),t._v(" "),a("h3",{attrs:{id:"单例模式-设计模式-不影响主线程-保证完成任务的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例模式-设计模式-不影响主线程-保证完成任务的作用"}},[t._v("#")]),t._v(" 单例模式-设计模式 （不影响主线程，保证完成任务的作用）")]),t._v(" "),a("ol",[a("li",[t._v("UIApplication")]),t._v(" "),a("li",[a("code",[t._v("网络请求")]),t._v(": 请求可以使 view 发起，controller接收去触发显示。保证 view 消失不会影响controller")]),t._v(" "),a("li",[a("code",[t._v("网络监听状态")]),t._v(": 任何页面、view 都可以获取到，提供了方便。")]),t._v(" "),a("li",[a("code",[t._v("下载")]),t._v(": 图片下载、断点续传等。")]),t._v(" "),a("li",[a("code",[t._v("router 的封装")]),t._v(": 路由跳转 url/UIController")]),t._v(" "),a("li",[a("code",[t._v("音乐/视频")]),t._v("类app，需要在所有页面之上显示且播放的: "),a("code",[t._v("音乐类-网易云音乐/QQ音乐")]),t._v("、"),a("code",[t._v("直播类-斗鱼、虎牙")])])]),t._v(" "),a("h3",{attrs:{id:"观察者-设计模式-1-nsnotification-通知-2-observer-观察者-kvo-键值观察"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者-设计模式-1-nsnotification-通知-2-observer-观察者-kvo-键值观察"}},[t._v("#")]),t._v(" 观察者-设计模式 (1 NSNotification-通知, 2 observer-观察者(kvo-键值观察))")]),t._v(" "),a("ol",[a("li",[t._v("自封装"),a("code",[t._v("网络监听状态")]),t._v(": "),a("code",[t._v("通知")])]),t._v(" "),a("li",[t._v("页面"),a("code",[t._v("刷新/加载")]),t._v(" - "),a("code",[t._v("上拉/下拉")]),t._v(": MJRefresh - "),a("code",[t._v("kvo")])]),t._v(" "),a("li",[t._v("获取键盘高度、UITextFiled值的变化等等: "),a("code",[t._v("观察者 kvo")])])]),t._v(" "),a("h3",{attrs:{id:"工厂-设计模式-简单、工程、抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂-设计模式-简单、工程、抽象"}},[t._v("#")]),t._v(" 工厂-设计模式 (简单、工程、抽象)")]),t._v(" "),a("ol",[a("li",[a("del",[a("code",[t._v("RXPicker")]),t._v(": 封装UIPicker - 可以二次封装 - 有点牵强")])]),t._v(" "),a("li",[a("code",[t._v("推送类封装")]),t._v(": 简单工厂设计模式")]),t._v(" "),a("li",[a("code",[t._v("客服SDK/百度SDK")]),t._v(" : 根据适配模式 1. 自选 具体哪一个SDK")]),t._v(" "),a("li",[a("code",[t._v("地图SDK")]),t._v(" : 根据适配模式 1. 自选 具体哪一个SDK")])]),t._v(" "),a("h3",{attrs:{id:"建造者-设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建造者-设计模式"}},[t._v("#")]),t._v(" 建造者-设计模式")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("接口")]),t._v("的数据模型")]),t._v(" "),a("li",[a("code",[t._v("组件")]),t._v("的数据模式")])]),t._v(" "),a("h3",{attrs:{id:"适配器-设计模式-protocol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适配器-设计模式-protocol"}},[t._v("#")]),t._v(" 适配器-设计模式 (@protocol)")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("客服SDK (七鱼、小能、Udesk)")]),t._v(": 客服SDK @protocol 只是共性的协议")]),t._v(" "),a("li",[a("code",[t._v("地图SDK")]),t._v(": 百度地图、高德地图、谷歌地图")]),t._v(" "),a("li",[a("code",[t._v("播放器封装 (AVPlayer / 第三方ijkplayer)")])])]),t._v(" "),a("h3",{attrs:{id:"策略设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#策略设计模式"}},[t._v("#")]),t._v(" 策略设计模式")]),t._v(" "),a("ol",[a("li",[t._v("验证类工具: Email /  emoji / phone / userName")])]),t._v(" "),a("h3",{attrs:{id:"代理模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[t._v("#")]),t._v(" 代理模式")]),t._v(" "),a("ol",[a("li",[t._v("UITableView / UICollectionView: "),a("code",[t._v("delegation")])])]),t._v(" "),a("h3",{attrs:{id:"装饰器-设计模式-category-类别-delegation-委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器-设计模式-category-类别-delegation-委托"}},[t._v("#")]),t._v(" 装饰器-设计模式 ("),a("code",[t._v("category - 类别")]),t._v(" / "),a("code",[t._v("delegation - 委托")]),t._v(")")]),t._v(" "),a("ol",[a("li",[t._v("UITableView / UICollectionView: "),a("code",[t._v("delegation")])]),t._v(" "),a("li",[t._v("自定义组件 - xxx : 根据 "),a("code",[t._v("category")]),t._v(" 实现不用的 UI/交互")])]),t._v(" "),a("h3",{attrs:{id:"原型-设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型-设计模式"}},[t._v("#")]),t._v(" 原型 - 设计模式")]),t._v(" "),a("ol",[a("li",[t._v("数据源: TableView.datasource")])]),t._v(" "),a("h2",{attrs:{id:"三、参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、参考"}},[t._v("#")]),t._v(" 三、参考")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/goodboy1.heyang/p/5265675.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("cnblogs - IOS设计模式-观察者模式"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/huangzs/p/10618173.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("cnblogs - iOS开发中的几种设计模式"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/u/cef9694f06a1",target:"_blank",rel:"noopener noreferrer"}},[t._v("简书 - iOS 设计模式"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/qq_19678579/article/details/86162604",target:"_blank",rel:"noopener noreferrer"}},[t._v("csdn - iOS中常用的设计模式"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/c3ce6762257c",target:"_blank",rel:"noopener noreferrer"}},[t._v("简书 - 六大设计原则之依赖倒置原则"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/badf5cac0130",target:"_blank",rel:"noopener noreferrer"}},[t._v("简书 - KVO原理分析及使用进阶"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);